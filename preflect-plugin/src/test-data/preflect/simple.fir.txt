FILE: simple.kt
    package foo.bar

    public final class Preflect : R|kotlin/Any| {
        public constructor(): R|foo/bar/Preflect| {
            super<R|kotlin/Any|>()
        }

        public final inline fun <reified T> name(): R|kotlin/String| {
            ^name when (<getClass>(R|T|)) {
                ==($subj$, <getClass>(Q|kotlin/Double|)) ->  {
                    String(kotlin.Double)
                }
                else ->  {
                    R|kotlin/error|(String(Not implemented))
                }
            }

        }

        public final inline fun <reified T> members(): R|kotlin/Array<kotlin/String>| {
            ^members when (<getClass>(R|T|)) {
                ==($subj$, <getClass>(Q|kotlin/Double|)) ->  {
                    R|kotlin/arrayOf|<R|kotlin/String|>(vararg(String(kotlin.Double), String(kotlin.Double2)))
                }
                else ->  {
                    R|kotlin/error|(String(Not implemented))
                }
            }

        }

    }
    public final class Example : R|kotlin/Any| {
        public constructor(): R|foo/bar/Example| {
            super<R|kotlin/Any|>()
        }

        public final var number: R|kotlin/Double| = Double(2.0)
            public get(): R|kotlin/Double|
            public set(value: R|kotlin/Double|): R|kotlin/Unit|

        public final var text: R|kotlin/String| = String(abc)
            public get(): R|kotlin/String|
            public set(value: R|kotlin/String|): R|kotlin/Unit|

        public final var list: R|kotlin/collections/List<kotlin/collections/List<kotlin/Int>>| = R|kotlin/collections/listOf|<R|kotlin/collections/List<kotlin/Int>|>()
            public get(): R|kotlin/collections/List<kotlin/collections/List<kotlin/Int>>|
            public set(value: R|kotlin/collections/List<kotlin/collections/List<kotlin/Int>>|): R|kotlin/Unit|

        public final fun count(): R|kotlin/Double| {
            ^count this@R|foo/bar/Example|.R|foo/bar/Example.number|
        }

        public final fun info(): R|kotlin/String| {
            ^info String(test)
        }

    }
    @R|com/maksg/preflect/runtime/annotation/PreflectSearchTypes|() public final inline fun <reified T> staticNameOf(): R|kotlin/String| {
        ^staticNameOf R|foo/bar/Preflect.Preflect|().R|foo/bar/Preflect.name|<R|T|>()
    }
    @R|com/maksg/preflect/runtime/annotation/PreflectSearchTypes|() public final inline fun <reified T> staticMembersOf(): R|kotlin/collections/List<kotlin/String>| {
        ^staticMembersOf R|foo/bar/Preflect.Preflect|().R|foo/bar/Preflect.members|<R|T|>().R|kotlin/collections/toList|<R|kotlin/String|>()
    }
    public final fun box(): R|kotlin/String| {
        lval expectedName: R|kotlin/String| = String(kotlin.collections.Map<kotlin.Double, kotlin.collections.List<foo.bar.Example>>)
        lval expectedMembers: R|kotlin/collections/List<kotlin/String>| = R|kotlin/collections/listOf|<R|kotlin/String|>(vararg(String(number), String(text), String(list), String(count), String(info), String(equals), String(hashCode), String(toString)))
        R|kotlin/io/println|(R|foo/bar/staticMembersOf|<R|kotlin/Double|>().R|SubstitutionOverride<kotlin/collections/List.get: R|kotlin/String|>|(Int(0)))
        lval name: R|kotlin/String| = R|foo/bar/staticNameOf|<R|kotlin/collections/Map<kotlin/Double, kotlin/collections/List<foo/bar/Example>>|>()
        lval members: R|kotlin/collections/List<kotlin/String>| = R|foo/bar/staticMembersOf|<R|foo/bar/Example|>()
        when () {
            ==(R|<local>/name|, R|<local>/expectedName|) ->  {
                when () {
                    ==(R|<local>/members|, R|<local>/expectedMembers|) ->  {
                        ^box String(OK)
                    }
                    else ->  {
                        ^box <strcat>(String(Fail members: actual = ), R|<local>/members|, String( expected = ), R|<local>/expectedMembers|)
                    }
                }

            }
            else ->  {
                ^box <strcat>(String(Fail name: actual = ), R|<local>/name|, String( expected = ), R|<local>/expectedName|)
            }
        }

    }
